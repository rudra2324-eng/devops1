Experiment 8: Practical Exercise: Set Up a Jenkins CI Pipeline for a Maven
Project, Use Ansible to Deploy Artifacts Generated by Jenkins


Step 1: 
1. first create directory for program8
  .mkdir program8
2.change the directory
  .cd program8
3.Preparing the Maven Project
 .mvn archetype:generate -DgroupId=com.example -DartifactId=hellomaven-ci -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
 .cd to hellomaven-ci(remember that what ur given in dartifact id) 
4.Writing an Ansible Playbook for Deployment
A. Create an Inventory File
  .in terminal type nano hosts.ini and enter below code in that (for saving ctrl+o and you have to press enter after that ctrl +x-to revert back to terminal)
[local]
localhost ansible_connection=local
B. Create the Deployment Playbook
after saving get back to terminal and type nano deploy.yml and enter below code inside it
- name: Deploy Maven Artifact
  hosts: localhost
  become: yes
  tasks:
    - name: Create deployment directory if it does not exist
      file:
        path: /opt/deployment
        state: directory
        mode: '0755'

    - name: Copy the artifact to the deployment directory
      ansible.builtin.copy:
        src: "/var/lib/jenkins/workspace/hellomaven-ci/target/hellomaven-ci-1.0-SNAPSHOT.jar"
        dest: "/opt/deployment/HelloMaven.jar"

c. Save and Exit the File


5.go to git hub create one repository by the name
 .hello-maven
after that follows steps in terminal which is shown in git repository
   .git init
   .git add .
   .git commit -m "Initial commit: hellomaven-ci"
6.Then push it to your repository (GitHub, GitLab, etc.).
   .git push -u origin main
Step 2: Configuring Jenkins to Build the Maven Project
A. Create a New Jenkins Job (Freestyle Project)
1. Log into Jenkins:
Open your browser and navigate to your Jenkins URL (e.g.,
http://localhost:8080).
2. Create a New Job:
. Click “New Item” on the Jenkins dashboard.
. Enter an Item Name: e.g., HelloMaven-CI.
. Select “Freestyle project” and click “OK”.
. Configure Source Code Management (SCM)
3. Scroll to the “Source Code Management” Section:
. Select “Git”.
. Repository URL: Enter your repository URL (e.g.,
https://github.com/yourusername/HelloMaven.git).
. Branch Specifier: (e.g., */main or */master).
4. Add a Maven Build Step
1. Scroll Down to the “Build” Section:
 . Click “Add build step” and select “Invoke top-level Maven targets”.
2. Configure the Maven Build:
 . Goals: Type:
 .clean package
This command cleans any previous builds, compiles the code, runs tests, and
packages the application into a JAR file
5. Step 3: Archiving the Artifact
After the Maven build completes, you need to archive the generated artifact so that it can be
used later by the deployment process.
1. Scroll Down to the “Post-build Actions” Section:
. Click “Add post-build action” and select “Archive the artifacts”.
2. Configure Artifact Archiving:
. Files to Archive: Type:
. target/*.jar
This pattern tells Jenkins to archive any JAR file found in the target directory

6. Step 4: Integrating Ansible Deployment in Jenkins
Now, integrate an Ansible deployment step into the Jenkins job. You can do this as a post-build
action that executes a shell command.

1. Scroll up to the “Build” Section:
 . Click “Add build step”and select “Execute shell”
2. Configure the Shell Command:
 .In the command box, add a command to trigger your Ansible playbook. 

  ansible-playbook -i hosts.ini deploy.yml --ask-become-pass
3. Save the Jenkins Job:
. Click “Save” at the bottom of the configuration page.
after that build now
